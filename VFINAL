#include<stdbool.h>
#include <stdint.h>
#include <math.h>

#include <inc/tm4c1294ncpdt.h>
int i;
double data[],va1,va2;
int control,ilum,elev,dpos, PARO=0,a,t;
float LDR=0,LM35=0;
int main(){
SYSCTL_RCGCGPIO_R=0X3EBA; //HABILITA RELOJ DE PUERTO M, K, E,  L , D,H,P,F,B
while( (SYSCTL_PRGPIO_R & 0x3EBA) ==0);//
GPIO_PORTD_AHB_DIR_R = 0x07;
GPIO_PORTD_AHB_DEN_R = 0x1F;
GPIO_PORTD_AHB_PDR_R = 0x01;
GPIO_PORTL_DIR_R = 0x3F;
GPIO_PORTL_DEN_R = 0x3F;
GPIO_PORTL_DR4R_R = 0x3F;

GPIO_PORTF_AHB_DIR_R |= 0x00;
GPIO_PORTF_AHB_DEN_R |= 0X06;
NVIC_EN0_R = 0x02;
GPIO_PORTF_AHB_IM_R |= 0X06;
GPIO_PORTF_AHB_IS_R = 0x0;
GPIO_PORTF_AHB_IEV_R |= 0X06;

GPIO_PORTB_AHB_DEN_R = 0x0C;
GPIO_PORTB_AHB_DIR_R = 0x00;
GPIO_PORTB_AHB_PDR_R = 0x0C;
GPIO_PORTE_AHB_DIR_R = 0x00;    // 2) PE5-4 entradas (analógica)
GPIO_PORTE_AHB_AFSEL_R |= 0x30; // 3) Habilita Función Alterna en
GPIO_PORTE_AHB_DEN_R &= ~0x30;  // 4) Deshabilita Función Digital en
GPIO_PORTE_AHB_AMSEL_R |= 0x30; // 5) Habilita Función Analógica de
SYSCTL_RCGCADC_R |= 0x01;       // 6) Habilita reloj para ADC0
while((SYSCTL_PRADC_R & 0x01) == 0); // Se espera a que el reloj se estabilice
inter();
Servo_init();
HC05_init();
while(1){
i=0;
ADC0_PSSI_R = 0x0004; // Inicia conversión del SS2
while((ADC0_RIS_R&0x04)==0);     // Espera a que SS2 termine conversión (polling)
data[0] = (ADC0_SSFIFO2_R&0xFFF);// se lee el primer resultado
data[1] = (ADC0_SSFIFO2_R&0xFFF);// se lee el segundo resultado
va1=data[0];
va2=data[1];
LDR = ((va2*50)/1024);

LM35=((5.0*va1*10.0)/1024)-12;
ADC0_ISC_R = 0x0004;

if (LM35>32){
    GPIO_PORTD_AHB_DATA_R = 0x01;

}else if (LM35<32){
    GPIO_PORTD_AHB_DATA_R = 0x00;
}

if (LDR>32){
    abrirgarage();

}else if (LDR<32){
    cerrargarage();
}


char c = Bluetooth_Read();

ilum = GPIO_PORTL_DATA_R;

if( c == 'A'){
Bluetooth_Write_String("Cerrando Garage\n");
abrirgarage();


}
else if( c =='B'){
//GPIO_PORTF_AHB_DATA_R  &=~(1<<0); //GPIO_PORTN_DATA_R  &=~(1<<0);//GPIO_PORTF_AHB_DATA_R  &=~(1<<0);
Bluetooth_Write_String("Abriendo Garage\n");
cerrargarage();


}
else if( c =='C'){
 Bluetooth_Write_String("Cerrar  Puerta\n");
 puertabrir();

}
else if( c =='D'){
Bluetooth_Write_String("Abrir puerta\n");
puertacerrar();

}
else if( c =='E'){
 Bluetooth_Write_String("CUARTO 1\n");

 GPIO_PORTL_DATA_R = ilum + 0X01;

}
else if( c=='F'){
 Bluetooth_Write_String("CUARTO 2\n");
 GPIO_PORTL_DATA_R = ilum + 0X02;

}
else if( c=='G'){
 Bluetooth_Write_String("BAÑO\n");
 GPIO_PORTL_DATA_R = ilum + 0X04;

}
else if( c=='H'){
 Bluetooth_Write_String("SALA\n");
 GPIO_PORTL_DATA_R = ilum + 0X08;

}
else if( c=='I'){
 Bluetooth_Write_String("RECIBIDOR\n");
 GPIO_PORTL_DATA_R = ilum + 0X10;

}
else if( c=='L'){
 Bluetooth_Write_String("GARAGE\n");
 GPIO_PORTL_DATA_R = ilum + 0X20;

}
else if( c=='J'){
 Bluetooth_Write_String("SUBIENDO\n");
 PARO = GPIO_PORTB_AHB_DATA_R;
 dpos = GPIO_PORTD_AHB_DATA_R;
 if (PARO==0x04){
     GPIO_PORTD_AHB_DATA_R = 0x04;
 while(PARO < 0X08 ){
     PARO = GPIO_PORTB_AHB_DATA_R;

 }
 GPIO_PORTD_AHB_DATA_R = 0x00;}

}
else if( c=='K'){

    PARO = GPIO_PORTB_AHB_DATA_R;
    dpos = GPIO_PORTD_AHB_DATA_R;
 Bluetooth_Write_String("BAJANDO\n");
 if (PARO==0x08){
      GPIO_PORTD_AHB_DATA_R = 0x02;
  while(PARO != 0X04 ){
      PARO = GPIO_PORTB_AHB_DATA_R;

  }
  GPIO_PORTD_AHB_DATA_R = 0x00;}


}
else if( c=='M'){
 Bluetooth_Write_String("EMERGENCIA\n");
 GPIO_PORTL_DATA_R = 0X00;
 PANICO();


}
else if( c=='N'){
 Bluetooth_Write_String("OFF\n");
 GPIO_PORTL_DATA_R = 0X00;
 GPIO_PORTD_AHB_DATA_R = 0X00;


}

//PD0
//VENTILADOR
//ocupar transistor
//PD1 PD2
//ELEVADOR

//PL0-5
//ILUMINACIÓN







}}//fin de programa
void inter()
{
    a = 0;
    if(((GPIO_PORTF_AHB_DATA_R &= 0x02)!=0))
    {
      Bluetooth_Write_String("EMERGENCIA ACTIVADA CON BOTON DE PANICO\n");
      PANICO();

    }else if(((GPIO_PORTF_AHB_DATA_R &= 0x04)!=0))
    {
        Bluetooth_Write_String("CONTRASEÑA MANUAL\n");
        PIN();
    }
    /*else if(((GPIO_PORTB_AHB_DATA_R &= 0x04)!=0))
    {
        Bluetooth_Write_String("VUELVA A INICIAR\n");
        PIN();
    */

}
int PANICO(){
    GPIO_PORTN_DIR_R = 0x0C;
    GPIO_PORTN_DEN_R = 0x0C;
    //cierran puertas
    abrirgarage();
    puertacerrar();
    GPIO_PORTL_DATA_R = 0x00;
    GPIO_PORTD_AHB_DATA_R = 0x00;
    while (a<10){
    GPIO_PORTN_DATA_R = 0x0C;
    a++;
    for(t=0 ; t<0X28FFFF ; t++);
    }
    GPIO_PORTN_DATA_R = 0x00;
}
int PIN(){
    //PIN A59B*
    GPIO_PORTH_AHB_DIR_R = 0x00;
    GPIO_PORTH_AHB_DEN_R = 0x0F;
    GPIO_PORTP_DIR_R = 0x0F;
    GPIO_PORTP_DEN_R = 0x0F;

    GPIO_PORTP_DATA_R = 0x08;
    while(((GPIO_PORTH_AHB_DATA_R &= 0x01)==0));
    GPIO_PORTP_DATA_R = 0x04;
    while(((GPIO_PORTH_AHB_DATA_R &= 0x04)==0));
    GPIO_PORTP_DATA_R = 0x02;
    while(((GPIO_PORTH_AHB_DATA_R &= 0x02)==0));
    GPIO_PORTP_DATA_R = 0x04;
    while(((GPIO_PORTH_AHB_DATA_R &= 0x01)==0));
    GPIO_PORTP_DATA_R = 0x01;
    while(((GPIO_PORTH_AHB_DATA_R &= 0x08)==0));
    //abrimos entrada
    puertacerrar();
    for(t=0 ; t<0X28FFFF ; t++);
    puertabrir();

}

int puertabrir(){
    TIMER2_TAPMR_R=0X4;
    TIMER2_TAMATCHR_R=0X6500;
}

int puertacerrar(){
    TIMER2_TAPMR_R=0X4;
    TIMER2_TAMATCHR_R=0XB000;

}
void HC05_init(void)
{


SYSCTL_RCGCUART_R |= 0x10;  /* enable clock to UART4 */
//SYSCTL_RCGCGPIO_R |= 0x200;  /* enable clock to PORTK for PK0/Rx and RK1/Tx */
Delay(1);
/* UART0 initialization */
UART4_CTL_R = 0;         /* UART4 module disable */
UART4_IBRD_R = 104;      /* for 9600 baud rate, integer = 104 */
UART4_FBRD_R = 11;       /* for 9600 baud rate, fractional = 11*/
UART4_CC_R = 0;          /*select system clock*/
UART4_LCRH_R = 0x60;     /* data lenght 8-bit, not parity bit, no FIFO */
UART4_CTL_R = 0x301;     /* Enable UART4 module, Rx and Tx */
// UART4_DR_R = 0;
/* UART4 TX4 and RX4 use PK0 and PK1. Configure them digital and enable alternate function */
GPIO_PORTK_DEN_R    = 0x03;      /* set PK0 and PK1 as digital */
GPIO_PORTK_AFSEL_R = 0x03;    /* Use PK0,PK1 alternate function */
GPIO_PORTK_AMSEL_R  = 0;    /* Turn off analg function*/
GPIO_PORTK_PCTL_R = 0x00000011;     /* configure PK0 and PK1 for UART */
}

char Bluetooth_Read(void)
{
    char data;
    while((UART4_FR_R & (1<<4)) != 0); /* wait until Rx buffer is not full */

    data = UART4_DR_R ;      /* before giving it another byte */
    return (unsigned char) data;
}

void Bluetooth_Write(unsigned char data)
{
    while((UART4_FR_R & (1<<5))!= 0); /* wait until Tx buffer not full */
    UART4_DR_R = data;                  /* before giving it another byte */
}

void Bluetooth_Write_String(char *str)
{
    while(*str)
    {
        Bluetooth_Write(*(str++));
    }
}

void Delay(unsigned long counter)
{
    unsigned long i = 0;

    for(i=0; i< counter; i++);
}

int abrirgarage(){
    ADC0_PSSI_R = 0x0004; // Inicia conversión del SS2
    while ((ADC0_RIS_R & 0x04)==0); // Espera a que SS2 termine conversión (poleo)
    TIMER2_TBPMR_R=0X4;
    TIMER2_TBMATCHR_R=0X6500;
}

int cerrargarage(){
    ADC0_PSSI_R = 0x0004; // Inicia conversión del SS2
    while ((ADC0_RIS_R & 0x04)==0); // Espera a que SS2 termine conversión (poleo)
    TIMER2_TBPMR_R=0X4;
    TIMER2_TBMATCHR_R=0XB000;
}


int Servo_init(){
//PROGRAMACIÓN DE PUERTOS
GPIO_PORTM_DIR_R = 0xC3; // PM1 entrada (para timer)
GPIO_PORTM_AFSEL_R |= 0x03; // Habilita Función Alterna de PM1
GPIO_PORTM_DEN_R = 0xC3; // Deshabilita Función Digital de PM1
GPIO_PORTM_PCTL_R |= 0x00033; // Conecta pin al timer(SIEMPRE ES 3 PRTO COMO OCUPAS PM1 SE PONE HASTA ALLA)

//******* CONFIGURACIÓN DEL ADC ******************
SYSCTL_RCGCADC_R = 0x01; // Habilita reloj para lógica de ADC0
while((SYSCTL_PRADC_R&0x01)==0);
ADC0_PC_R = 0x01; // Configura para 125Ks/s
ADC0_SSPRI_R = 0x3021; // SS2 con la más alta prioridad
ADC0_ACTSS_R = 0x0000; // Deshabilita SS2 antes de cambiar configuración de registros
ADC0_EMUX_R = 0x0000; // Iniciar muestreo por software
ADC0_SSEMUX2_R = 0x00; // Rango de entradas para bit EMUX0: AIN[15:0]
ADC0_SSMUX2_R = 0X1890; // Para bit MUX0: Canal AIN9 => PE4, canal AIN0 => PE3 (tabla 15-1). Ultima muestra es PE2
ADC0_SSCTL2_R = 0x6000; // Entrada externa, NO habilita INT., SI última muestra, NO diferencial
ADC0_IM_R = 0x0000; // Deshabilita interrupciones de SS2
ADC0_ACTSS_R |= 0x0004; // Habilita SS2
//******* SINCRONIZACIÓN DE PLL PARA UTILIZAR PIOSC ******************
SYSCTL_PLLFREQ0_R |= SYSCTL_PLLFREQ0_PLLPWR; // Enciende PLL
while((SYSCTL_PLLSTAT_R&0x01)==0); // Espera a que el PLL fije su frecuencia
SYSCTL_PLLFREQ0_R &= ~SYSCTL_PLLFREQ0_PLLPWR; // Apaga PLL
SYSCTL_RCGCTIMER_R=0X04;
SysCtlDelay(10);
TIMER2_CTL_R=0X0000;  //HABILITA TIMER B
TIMER2_CFG_R=0X04;
TIMER2_TBMR_R=0XA;
TIMER2_TAMR_R=0XA;
//Seleccionar preescala
TIMER2_TBPR_R=0x4;
TIMER2_TBILR_R=0XE200;
TIMER2_TBPMR_R=0X4;
TIMER2_TBMATCHR_R=0X6500;
//Habilitación del timer para la puerta
TIMER2_TAPR_R=0x4; //Periodo de la señal
TIMER2_TAILR_R=0XE200; //Periodo de la señal
TIMER2_TAPMR_R=0X4; //Ciclo de trabajo
TIMER2_TAMATCHR_R=0X86FC; //Ciclo de trabajo
TIMER2_CTL_R=0x0101;//Habilita timer B

}

